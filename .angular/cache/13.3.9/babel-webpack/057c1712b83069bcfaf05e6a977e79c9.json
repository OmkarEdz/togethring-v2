{"ast":null,"code":"import { AsyncSubject } from 'rxjs';\nimport { Directive, ElementRef, Input, Inject, Injectable, InjectionToken, NgModule } from '@angular/core';\nimport * as Highcharts from 'highcharts';\nimport { mapChart, stockChart, chart } from 'highcharts';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nimport * as ɵngcc0 from '@angular/core';\n\nclass Chart {\n  /**\n   * @param {?=} options\n   */\n  constructor(options = {\n    series: []\n  }) {\n    this.options = options;\n    this.refSubject = new AsyncSubject();\n    this.ref$ = this.refSubject.asObservable();\n  }\n  /**\n   * Add Point\n   * @param {?} point         Highcharts.DataPoint, number touple or number\n   * @param {?=} serieIndex    Index position of series. This defaults to 0.\n   * @param {?=} redraw        Flag whether or not to redraw point. This defaults to true.\n   * @param {?=} shift         Shift point to the start of series. This defaults to false.\n   * @return {?}\n   */\n\n\n  addPoint(point, serieIndex = 0, redraw = true, shift = false) {\n    this.ref$.subscribe(\n    /**\n    * @param {?} chart\n    * @return {?}\n    */\n    chart$$1 => {\n      if (chart$$1.series.length > serieIndex) {\n        chart$$1.series[serieIndex].addPoint(point, redraw, shift);\n      }\n    });\n  }\n  /**\n   * Add Series\n   * @param {?} series        Series Configuration\n   * @param {?=} redraw        Flag whether or not to redraw series. This defaults to true.\n   * @param {?=} animation     Whether to apply animation, and optionally animation configuration. This defaults to false.\n   * @return {?}\n   */\n\n\n  addSeries(series, redraw = true, animation) {\n    this.ref$.subscribe(\n    /**\n    * @param {?} chart\n    * @return {?}\n    */\n    chart$$1 => {\n      chart$$1.addSeries(series, redraw, animation);\n    });\n  }\n  /**\n   * Remove Point\n   * @param {?} pointIndex    Index of Point\n   * @param {?=} serieIndex    Specified Index of Series. Defaults to 0.\n   * @return {?}\n   */\n\n\n  removePoint(pointIndex, serieIndex = 0) {\n    this.ref$.subscribe(\n    /**\n    * @param {?} chart\n    * @return {?}\n    */\n    chart$$1 => {\n      if (chart$$1.series.length > serieIndex && chart$$1.series[serieIndex].data.length > pointIndex) {\n        chart$$1.series[serieIndex].removePoint(pointIndex, true);\n      }\n    });\n  }\n  /**\n   * Remove Series\n   * @param {?} seriesIndex    Index position of series to remove.\n   * @return {?}\n   */\n\n\n  removeSeries(seriesIndex) {\n    this.ref$.subscribe(\n    /**\n    * @param {?} chart\n    * @return {?}\n    */\n    chart$$1 => {\n      if (chart$$1.series.length > seriesIndex) {\n        chart$$1.series[seriesIndex].remove(true);\n      }\n    });\n  }\n  /**\n   * @param {?} el\n   * @return {?}\n   */\n\n\n  init(el) {\n    if (!this.ref) {\n      chart(el.nativeElement, this.options,\n      /**\n      * @param {?} chart\n      * @return {?}\n      */\n      chart$$1 => {\n        this.refSubject.next(chart$$1);\n        this.ref = chart$$1;\n        this.refSubject.complete();\n      });\n    }\n  }\n  /**\n   * @return {?}\n   */\n\n\n  destroy() {\n    if (this.ref) {\n      this.options = this.ref.options;\n      this.ref.destroy();\n      this.ref = undefined; // new init subject\n\n      this.refSubject = new AsyncSubject();\n      this.ref$ = this.refSubject.asObservable();\n    }\n  }\n\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @license\n * Copyright Felix Itzenplitz. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at\n * https://github.com/cebor/angular-highcharts/blob/master/LICENSE\n */\n\n\nclass MapChart {\n  /**\n   * @param {?=} options\n   */\n  constructor(options = {\n    series: []\n  }) {\n    this.options = options;\n    this.refSubject = new AsyncSubject();\n    this.ref$ = this.refSubject.asObservable();\n  }\n  /**\n   * @param {?} el\n   * @return {?}\n   */\n\n\n  init(el) {\n    if (!this.ref) {\n      mapChart(el.nativeElement, this.options,\n      /**\n      * @param {?} chart\n      * @return {?}\n      */\n      chart$$1 => {\n        this.refSubject.next(chart$$1);\n        this.ref = chart$$1;\n        this.refSubject.complete();\n      });\n    }\n  }\n  /**\n   * @return {?}\n   */\n\n\n  destroy() {\n    if (this.ref) {\n      this.options = this.ref.options;\n      this.ref.destroy();\n      this.ref = undefined; // new init subject\n\n      this.refSubject = new AsyncSubject();\n      this.ref$ = this.refSubject.asObservable();\n    }\n  }\n\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @license\n * Copyright Felix Itzenplitz. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at\n * https://github.com/cebor/angular-highcharts/blob/master/LICENSE\n *\n * @author Felix Itzenplitz\n * @author Timothy A. Perez (contributor)\n */\n\n\nclass StockChart {\n  /**\n   * @param {?=} options\n   */\n  constructor(options = {\n    series: []\n  }) {\n    this.options = options;\n    this.refSubject = new AsyncSubject();\n    this.ref$ = this.refSubject.asObservable();\n  }\n  /**\n   * @param {?} el\n   * @return {?}\n   */\n\n\n  init(el) {\n    if (!this.ref) {\n      stockChart(el.nativeElement, this.options,\n      /**\n      * @param {?} chart\n      * @return {?}\n      */\n      chart$$1 => {\n        this.refSubject.next(chart$$1);\n        this.ref = chart$$1;\n        this.refSubject.complete();\n      });\n    }\n  }\n  /**\n   * @return {?}\n   */\n\n\n  destroy() {\n    if (this.ref) {\n      this.options = this.ref.options;\n      this.ref.destroy();\n      this.ref = undefined; // new init subject\n\n      this.refSubject = new AsyncSubject();\n      this.ref$ = this.refSubject.asObservable();\n    }\n  }\n\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nlet ChartDirective = /*#__PURE__*/(() => {\n  class ChartDirective {\n    /**\n     * @param {?} el\n     */\n    constructor(el) {\n      this.el = el;\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n\n\n    ngOnChanges(changes) {\n      if (!changes.chart.isFirstChange()) {\n        this.destroy();\n        this.init();\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnInit() {\n      this.init();\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnDestroy() {\n      this.destroy();\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n\n    init() {\n      if (this.chart instanceof Chart || this.chart instanceof StockChart || this.chart instanceof MapChart) {\n        this.chart.init(this.el);\n      }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n\n    destroy() {\n      if (this.chart instanceof Chart || this.chart instanceof StockChart || this.chart instanceof MapChart) {\n        this.chart.destroy();\n      }\n    }\n\n  }\n\n  ChartDirective.ɵfac = function ChartDirective_Factory(t) {\n    return new (t || ChartDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  ChartDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ChartDirective,\n    selectors: [[\"\", \"chart\", \"\"]],\n    inputs: {\n      chart: \"chart\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n  /** @nocollapse */\n\n  return ChartDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nlet HIGHCHARTS_MODULES = new InjectionToken('HighchartsModules');\nlet ChartService = /*#__PURE__*/(() => {\n  class ChartService {\n    /**\n     * @param {?} chartModules\n     */\n    constructor(chartModules) {\n      this.chartModules = chartModules;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    initModules() {\n      this.chartModules.forEach(\n      /**\n      * @param {?} chartModule\n      * @return {?}\n      */\n      chartModule => {\n        chartModule(Highcharts);\n      });\n    }\n\n  }\n\n  ChartService.ɵfac = function ChartService_Factory(t) {\n    return new (t || ChartService)(ɵngcc0.ɵɵinject(HIGHCHARTS_MODULES));\n  };\n\n  ChartService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: ChartService,\n    factory: ChartService.ɵfac\n  });\n  /** @nocollapse */\n\n  return ChartService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nconst ɵ0 = [];\nlet ChartModule = /*#__PURE__*/(() => {\n  class ChartModule {\n    /**\n     * @param {?} cs\n     */\n    constructor(cs) {\n      this.cs = cs;\n      this.cs.initModules();\n    }\n\n  }\n\n  ChartModule.ɵfac = function ChartModule_Factory(t) {\n    return new (t || ChartModule)(ɵngcc0.ɵɵinject(ChartService));\n  };\n\n  ChartModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: ChartModule\n  });\n  ChartModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [{\n      provide: HIGHCHARTS_MODULES,\n      useValue: ɵ0\n    }, ChartService]\n  });\n  /** @nocollapse */\n\n  return ChartModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ChartModule, {\n    declarations: [ChartDirective],\n    exports: [ChartDirective]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { Chart, ChartModule, HIGHCHARTS_MODULES, MapChart, StockChart, ChartDirective as ɵb, ChartService as ɵa }; //# sourceMappingURL=angular-highcharts.js.map","map":null,"metadata":{},"sourceType":"module"}